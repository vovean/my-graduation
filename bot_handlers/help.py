import logging

import telegram
from telegram import Update
from telegram.ext import ContextTypes

HELPS = {
    '': '''
Команда /help показывается подробную справку по каждой команде, доступной в боте.
Для этого укажите интересующую команду, например, так: `/help login`
''',
    'help': '''
Команда /help показывается подробную справку по каждой команде, доступной в боте.
Для этого укажите интересующую команду, например, так: `/help login`
''',
    'start': '''
Команда /start выводит краткую информацию о боте и доступным командам. Внизу сообщения показан статус пользователя.

Пользователь может быть авторизован в режим управления сервисом или не авторизован. 
Чтобы авторизоваться необходимо выполнить команду /login, чтобы выйти из режима управления сервером нужно выполнить команду /logout
''',
    'login': '''
Команда /login позволяет пользователю перейти в режим управления сервером. Команда принимает один позиционный аргумент - секретный ключ.
Секретный ключ генерируется *только 1 раз* - при первом запуске бота на сервере. Для его получения обратитесь к администратору.

Пример вызова команды /login: `/login my-secret-key`

Если секретный ключ был введен команду, то пользователь будет авторизован, иначе будет отправлено сообщение об ошибке. 
Статус пользователя можно проверить в команде /start

*После успешной авторизации рекомендуется удалить сообщение, в котором была отправлена команда с секретным ключом*
''',
    'logout': '''
Команда /logout позволяет пользователю выйти из режима управления сервером. Это может быть нужно, например, из соображений безопасности.
После успешного выполнения команды можно проверить статус пользователя, выполнив команду /start
''',
    'run': '''
Команда /run позволяет пользователю выполнить *"простую"* команду. "Простой" называется команда, которая производит конечный вывод, т е ее вывод ограничен, не является бесконечным или динамически изменяющимся.
Примерами простых команд являются `ls`, `mkdir`, `chmod` и т.п.   

Вывод команды будет отправлен пользователю отдельным сообщением.
Под сообщением с выводом команды будет кнопка "Повторить", которая позволит выполнить команду еще раз без отправки ее текста новым сообщением.
_Важно заметить, что не все команды являются идемпотентными и повторное выполнение может привести к ошибке._

Пример вызова команды /run: `/run ls -la`
''',
    'rendless': '''
Команда /rendless позволяет выполнить команду с динамическим/бесконечным выводом. Примером такой команды является `top`.
Пользователю будет отправлено сообщение, текст которого будет меняться соответственно изменяющемуся выводу команды.

Под сообщением с выводом команды будет кнопка "Повторить", которая позволит выполнить команду еще раз без отправки ее текста новым сообщением.
_Важно заметить, что не все команды являются идемпотентными и повторное выполнение может привести к ошибке._

Пример вызова команды /rendless: `/rendless top`
''',
    'upload': '''
Команда /upload позволяет загрузить файл с устройства пользователя на сервер. 

При выполнении команды пользователю нужно указать *полный* путь (включая имя файла), куда будет загружен файл.
Если в указанном пути будут несуществующие директории, то они будут созданы.
Также необходимо прикрепить файл к сообщению через меню выбора файла в клиенте Telegram. 

Пример вызова команды /upload: `/upload /tmp/some/path/doc.txt`
''',
    'download': '''
Команда /download позволяет скачать файл с сервера на устройство пользователя.

При выполнении команды пользователю необходимо указать *полный* путь к файлу, который необходимо скачать с сервера.

Пример выполнения команды /download: `/download /tmp/my/file.txt`     
'''
}


def get_command(text: str) -> str:
    s = text.split(maxsplit=1)
    if len(s) != 2:
        return ''
    cmd = s[1]
    if cmd.startswith('/'):
        cmd = cmd[1:]
    return cmd



def get_help_text(text: str) -> str:
    cmd = get_command(text)
    return HELPS.get(cmd, HELPS['']).strip()


class HelpHandler:
    def __init__(self):
        self.logger = logging.getLogger('help logger')

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.logger.debug('help called')

        await context.bot.send_message(
            chat_id=update.effective_message.chat_id,
            text=get_help_text(update.effective_message.text),
            parse_mode='Markdown'
        )

    def get_handler(self) -> telegram.ext.BaseHandler:
        return telegram.ext.CommandHandler('help', self.help)
